- name: Set starting flags
  vars:
    prime_numbers: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]
  block:
  - include_tasks: playbooks/send-signals.yaml
    vars: {signal: queue}
    
  - name: Check value of current ansible lockfile
    shell: |
       touch {{ ansible_lock_file }};
       cat {{ ansible_lock_file }};
    register: last_task

  - name: Remove lockfile if current batch is same as last (e.g. for testing)
    file:
      path: '{{ ansible_lock_file }}'
      state: absent
    when: last_task.stdout | trim == batchid or last_task.stdout | trim == ""

  - name: Wait for other ansible invocations to complete
    ## We wait prime amounts so that two queued jobs waiting for the lock file
    ## don't both grab it at the same time.
    wait_for:
      path: '{{ ansible_lock_file }}'
      state: absent
      delay: '{{ prime_numbers | random }}'
      sleep: '{{ prime_numbers | random }}'
      timeout: 600

  - name: Take control of the lock file
    copy:
      dest: '{{ ansible_lock_file }}'
      content: '{{ batchid }}'

  - include_tasks: playbooks/send-signals.yaml
    vars: {signal: process}


